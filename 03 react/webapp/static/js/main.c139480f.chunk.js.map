{"version":3,"sources":["permission.js","components/navBar/index.js","routers/router.js","App.js","serviceWorker.js","index.js"],"names":["AuthRoute","Component","component","rest","render","props","next","localStorage","getItem","console","log","to","pathname","state","from","location","NavBar","React","Indexpage","lazy","NewsPage","GoodsPage","GoodsDetail","LoginPage","Userspage","RouterComponent","Fragment","fallback","path","exact","App","className","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAgCeA,MA7Bf,YAAuD,IAAvBC,EAAsB,EAAjCC,UAAyBC,EAAQ,6BACpD,OACE,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAACC,GACP,IACIC,EAAO,GAiBX,OAlBYC,aAAaC,QAAQ,UAK/BC,QAAQC,IAAI,sBACZJ,EAAO,kBAACL,EAAcI,KAEtBI,QAAQC,IAAI,kCACZJ,EACE,kBAAC,IAAD,CACEK,GAAI,CACFC,SAAU,SACVC,MAAO,CAAEC,KAAMT,EAAMU,cAKtBT,OCCAU,E,uKAtBX,OACE,4BACE,4BACE,kBAAC,IAAD,CAAML,GAAG,SAAT,iBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,SAAT,iBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,6BAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,6BAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,sB,GAjBWM,IAAMhB,WCarBiB,EAAYC,gBAAK,kBAAM,gCACvBC,EAAWD,gBAAK,kBAAM,gCACtBE,EAAYF,gBAAK,kBAAM,gCACvBG,EAAcH,gBAAK,kBAAM,gCACzBI,EAAYJ,gBAAK,kBAAM,gCACvBK,EAAYL,gBAAK,kBAAM,gCA6DdM,E,uKA/CX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KAEE,kBAAC,EAAD,MACA,kBAAC,IAAMA,SAAP,KACE,kBAAC,WAAD,CAAUC,SAAU,yCAIlB,kBAAC,IAAD,CAAOC,KAAK,QAAQ1B,UAAWgB,IAC/B,kBAAC,IAAD,CACEU,KAAK,IACLC,OAAK,EACLzB,OAAQ,kBAAM,kBAAC,IAAD,CAAUO,GAAG,aAE7B,kBAAC,IAAD,CAAOiB,KAAK,QAAQ1B,UAAWkB,IAE/B,kBAAC,IAAD,CAAOQ,KAAK,SAAS1B,UAAWqB,IAEhC,kBAAC,EAAD,CAAWK,KAAK,SAAS1B,UAAWsB,IACpC,kBAAC,IAAD,CAAOI,KAAK,SAAS1B,UAAWmB,IAOhC,kBAAC,IAAD,CAAOO,KAAK,cAAc1B,UAAWoB,Y,GA9BrBL,IAAMhB,WCpBrB6B,MATf,WACE,OACE,yBAAKC,UAAU,OAEb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOlB,SAASmB,UAEe,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MACvB,2DCbNC,IAAShC,OACP,kBAAC,IAAMiC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.c139480f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n//路由守卫\r\nfunction AuthRoute({ component: Component, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        let token = localStorage.getItem(\"token\");\r\n        let next = \"\";\r\n        if (token) {\r\n          //假设有token。并且假设验证通过\r\n          //ajax\r\n          console.log(\"可以看\");\r\n          next = <Component {...props} />;\r\n        } else {\r\n          console.log(\"回到登录页\");\r\n          next = (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/login\",\r\n                state: { from: props.location },\r\n              }}\r\n            />\r\n          );\r\n        }\r\n        return next;\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default AuthRoute;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavBar extends React.Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/home\">首页</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/news\">新闻</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/goods\">商品分类</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/users\">个人中心</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/login\">登录</Link>\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","//根组件  App.js\r\nimport React, { lazy, Suspense } from \"react\";\r\n//as重命名\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n// import Indexpage from \"../pages/index/index\";\r\n// import NewsPage from \"../pages/news\";\r\n// import GoodsPage from \"../pages/goods\";\r\n// import GoodsDetail from \"../pages/goods/detail\";\r\n//路由懒加载的实现：异步载入资源\r\nimport AuthRoute from \"../permission\"; //路由守卫\r\nimport NavBar from \"../components/navBar\";\r\nconst Indexpage = lazy(() => import(\"../pages/index/index\"));\r\nconst NewsPage = lazy(() => import(\"../pages/news\"));\r\nconst GoodsPage = lazy(() => import(\"../pages/goods\"));\r\nconst GoodsDetail = lazy(() => import(\"../pages/goods/detail\"));\r\nconst LoginPage = lazy(() => import(\"../pages/login\"));\r\nconst Userspage = lazy(() => import(\"../pages/users\"));\r\n// console.log(AuthRoute, 789);\r\n/*router.js 页面里的代码\r\nHashRouter:有#号 hash mode\r\nBrowserRouter:没有#号 history mode\r\nRoute：设置路由与组件关联:路由规则\r\nSwitch:只要匹配到一个地址不往下匹配，相当于for循环里面的break(如果有子路由就不要用)\r\nLink:跳转页面，相当于vue里面的router-link，声明式导航\r\nexact :完全匹配路由(如果有子路由就不要用)\r\nRedirect:路由重定向\r\n*/\r\n\r\nclass RouterComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Router>\r\n          {/* 导航条 */}\r\n          <NavBar />\r\n          <React.Fragment>\r\n            <Suspense fallback={<div>loading</div>}>\r\n              {/* 路由用的的组件一般放在pages或views里面 */}\r\n\r\n              {/* <Route path=\"/\" exact component={Indexpage}></Route> */}\r\n              <Route path=\"/home\" component={Indexpage}></Route>\r\n              <Route\r\n                path=\"/\"\r\n                exact\r\n                render={() => <Redirect to=\"/home\" />}\r\n              ></Route>\r\n              <Route path=\"/news\" component={NewsPage}></Route>\r\n              {/* 登录路由 */}\r\n              <Route path=\"/login\" component={LoginPage}></Route>\r\n              {/* 个人中心 */}\r\n              <AuthRoute path=\"/users\" component={Userspage}></AuthRoute>\r\n              <Route path=\"/goods\" component={GoodsPage}></Route>\r\n              {/* 子路由设置方式一:设置一个子路由 */}\r\n              {/* 传参方式一:动态路由，这种方式适合用于传输简单的数据 */}\r\n              {/* <Route\r\n              path=\"/goods/type/:id/:title\"\r\n              component={GoodsDetail}\r\n            ></Route> */}\r\n              <Route path=\"/goods/type\" component={GoodsDetail}></Route>\r\n              {/* <Route path=\"/goods/type/three\" component={Goodsxxx}></Route> */}\r\n              {/* 子路由设置方式二 */}\r\n              {/* <Route\r\n              path=\"/goods\"\r\n              render={() => (\r\n                <GoodsPage>\r\n                  <Route path=\"/goods/type/:id\" component={GoodsDetail}></Route>\r\n                </GoodsPage>\r\n              )}\r\n            ></Route> */}\r\n            </Suspense>\r\n          </React.Fragment>\r\n        </Router>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RouterComponent;\r\n","//根组件  App.js\r\nimport React from \"react\";\r\nimport RouterComponent from \"./routers/router\";\r\n//函数组件：在里面return jsx代码(虚拟DOM)\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <RouterComponent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}